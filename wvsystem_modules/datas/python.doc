
Info cadre
pos = editor.getCurrentPos()
editor.callTipShow(pos, "üîî Ceci est un calltip (pas une annotation)")

DOC : def example(arg1, arg2):
    """
    R√©sum√© ici.

    Args:
        arg1 (int): Description.
        arg2 (str): Description.

    Returns:
        bool: Description.
    """

def example(arg1, arg2):
    """
    R√©sum√© ici.

    Args:
        arg1 (int): Description.
        arg2 (str): Description.

    Returns:
        bool: Description.
    """
int	Un entier
float	Un flottant
bool	Un bool√©en
str	Une cha√Æne de caract√®res
unicode	Une cha√Æne unicode (important en Python 2 !)
list	Une liste (de n‚Äôimporte quoi)
list[str]	Une liste de cha√Ænes
tuple	Un tuple g√©n√©rique
tuple[int, str]	Un tuple de type (int, str)
dict	Un dictionnaire
dict[str, int]	Dictionnaire cl√© str, valeur int
object	Un objet Python g√©n√©rique
None	Signifie "retourne rien"
callable	Une fonction ou m√©thode qu‚Äôon peut appeler
Iterable, Iterator	Objet qu‚Äôon peut it√©rer (utile pour les for)
file	Objet fichier (en Python 2 : ouvert avec open())
type	Une classe elle-m√™me
Exception	Pour les blocs Raises:
Any	N‚Äôimporte quel type (informel, ou via typing)

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
1. Utiliser getattr() pour appeler une fonction d‚Äôun module
Si la fonction est d√©finie dans un module, vous pouvez la r√©cup√©rer avec getattr() :
________________________________________________________________________________________________________________________
import math

func_name = "sqrt"  # Nom de la fonction en string
result = getattr(math, func_name)(9)  # √âquivaut √† math.sqrt(9)

print result  # Affiche: 3.0

_______________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
2. Utiliser globals() ou locals() pour appeler une fonction d√©finie dans le m√™me script
Si la fonction est d√©finie dans le script courant, vous pouvez utiliser globals() ou locals() :
________________________________________________________________________________________________________________________
def ma_fonction(param):
    return "Vous avez dit : " + param

nom_fonction = "ma_fonction"
print globals()[nom_fonction]("Hello")  # Affiche: Vous avez dit : Hello

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
3. Dans une classe : utiliser getattr() sur self
Si la fonction est une m√©thode d‚Äôune classe, utilisez getattr(self, "nom_fonction") :
________________________________________________________________________________________________________________________
class Test:
    def ma_methode(self, x):
        return "Valeur re√ßue : " + str(x)

    def appeler_methode(self, nom, param):
        return getattr(self, nom)(param)  # √âquivaut √† self.ma_methode(param)

obj = Test()
print obj.appeler_methode("ma_methode", 42)  # Affiche: Valeur re√ßue : 42

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
4. Importer un module via __import__() et appeler une fonction
Si le nom du module est dans une cha√Æne de caract√®res, utilisez __import__() pour l'importer dynamiquement :________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
module_name = "math"  # Nom du module en string
module = __import__(module_name)  # Importation dynamique

func_name = "sqrt"  # Nom de la fonction
result = getattr(module, func_name)(9)  # √âquivaut √† math.sqrt(9)

print result  # Affiche: 3.0


________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
5. Stocker le module et ses fonctions dans un dictionnaire
Si vous avez plusieurs modules et fonctions √† appeler dynamiquement :
________________________________________________________________________________________________________________________
modules = {
    "math": __import__("math"),
    "random": __import__("random")
}

# Appel dynamique
print modules["math"].sqrt(16)  # math.sqrt(16) ‚Üí 4.0
print modules["random"].randint(1, 10)  # random.randint(1, 10)


________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
6. Utiliser une cha√Æne pour importer un module et appeler une fonction
Si le nom du module et de la fonction sont tous deux en cha√Æne :
________________________________________________________________________________________________________________________
module_name = "math"
func_name = "pow"

module = __import__(module_name)  # Import dynamique
function = getattr(module, func_name)  # R√©cup√©ration de la fonction
result = function(2, 3)  # √âquivaut √† math.pow(2, 3)

print result  # Affiche: 8.0
‚úÖ Explication :

__import__("math") importe math.
getattr(math, "pow") r√©cup√®re la fonction pow.
function(2, 3) ex√©cute pow(2, 3).

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
7. Importer un module sp√©cifique depuis un package
Si vous devez importer un module sp√©cifique depuis un package :

________________________________________________________________________________________________________________________
module_name = "os.path"
module = __import__(module_name, fromlist=[""])  # Importe os.path

print module.basename("/home/user/file.txt")  # Affiche: file.txt
‚úÖ fromlist=[""] permet de r√©cup√©rer directement os.path au lieu de os.

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
8. Exemple combin√© : Import dynamique et ex√©cution
Si vous voulez ex√©cuter une fonction d‚Äôun module dont le nom est en string :
________________________________________________________________________________________________________________________
def execute_function(module_name, function_name, *args):
    module = __import__(module_name)  # Importer le module
    function = getattr(module, function_name)  # R√©cup√©rer la fonction
    return function(*args)  # Ex√©cuter la fonction avec ses arguments

# Exemples
print execute_function("math", "sqrt", 25)  # 5.0
print execute_function("math", "pow", 2, 4)  # 16.0
‚úÖ Avantage : Fonction g√©n√©rique qui appelle n'importe quelle fonction d'un module en string.